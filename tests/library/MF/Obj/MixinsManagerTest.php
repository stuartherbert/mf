<?php

__mf_init_tests('Obj');

/**
 * Test class for MF_Obj_MixinsManager.
 * Generated by PHPUnit on 2010-04-01 at 17:04:23.
 */
class MF_Obj_MixinsManagerTest extends PHPUnit_Framework_TestCase
{
        public function setup()
        {
                // reset our singleton ready for the next round of testing
                MF_Obj_MixinsManager::destroy();
        }

        public function testMixinsManagerIsSingleton()
        {
                $caughtException = false;

                try
                {
                        $obj = new MF_Obj_MixinsManager();
                }
                catch (Exception $e)
                {
                        if ($e instanceof MF_PHP_E_IsSingleton)
                        {
                                $caughtException = true;
                        }
                }

                $this->assertTrue($caughtException);
        }
        
        public function testCanResetListOfKnownMixins()
        {
                // entry conditions
                $this->assertEquals(0, MF_Obj_MixinsManager::$mixinAutoInc);
                __mf_extend('Test_ObjExt', 'Test_Obj_ExtMixin');
                $this->assertEquals(1, MF_Obj_MixinsManager::$mixinAutoInc);

                // make the changes
                MF_Obj_MixinsManager::destroy();

                // retest
                $this->assertEquals(0, MF_Obj_MixinsManager::$mixinAutoInc);
        }

        public function testCanExtendAClass()
        {
                // entry conditions
                $this->assertEquals(0, MF_Obj_MixinsManager::$mixinAutoInc);
                $this->assertNull(MF_Obj_MixinsManager::getMixinsFor('Test_ObjExt'));

                // make the changes
                __mf_extend('Test_ObjExt', 'Test_Obj_ExtMixin');

                // retest
                $mixins = MF_Obj_MixinsManager::getMixinsFor('Test_ObjExt');

                $this->assertEquals(1, MF_Obj_MixinsManager::$mixinAutoInc);
                $this->assertTrue($mixins instanceof MF_Obj_MixinsList);
        }

        public function testCanGetRawMixinsLists()
        {
                // entry conditions
                $mixins = MF_Obj_MixinsManager::getRawMixins();
                $this->assertEquals(0, MF_Obj_MixinsManager::$mixinAutoInc);
                $this->assertTrue(is_array($mixins));
                if (is_array($mixins))
                {
                        $this->assertEquals(0, count($mixins));
                }

                // make the changes
                __mf_extend('Test_ObjExt', 'Test_Obj_ExtMixin');

                // retest
                $mixins = MF_Obj_MixinsManager::getRawMixins();
                $this->assertEquals(1, MF_Obj_MixinsManager::$mixinAutoInc);
                $this->assertTrue(is_array($mixins));
                if (is_array($mixins))
                {
                        $this->assertEquals(1, count($mixins));
                        $this->assertTrue(isset($mixins['Test_ObjExt']));
                }
        }
}

?>
